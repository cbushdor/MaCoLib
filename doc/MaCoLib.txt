*MaCoLib.txt*       my MAnager for COlor LIBrary and some more stuff

		Creation Date :2024-02-15 23:11:52
		Last Modified : 2024-05-09 00:34:45
		Version : 0.0.0.311

==============================================================================
CONTENTS                                                *MaCoLib* *help_MaCoLib*

How to Install Plugin                                   |help_MaCoLib_install|
Intro                                                     |help_MaCoLib_intro|
Variables                                             |help_MaCoLib_Variables|
Functions                                             |help_MaCoLib_Functions|
Object                                                   |help_MaCoLib_Object|
Example                                                 |help_MaCoLib_Example|
Warning						          |help_MaCoLib_notes|
Helps                                                     |help_MaCoLib_extra|
Credits                                                 |help_MaCoLib_credits|
Licence                                                 |help_MaCoLib_licence|

==============================================================================
How to Install Plugin                                     *help_MaCoLib_install*

Technical requirements

    * Vim (text editor): Version 9.0.1050.
    * System macOS: Version 13.2.1 (22D68).
    * System Fedora: Version 38beta (Should work on other linux distros too).
    * Scripts: Markdown, Vim Script, shell sh.
    * Vim plugin: Vim-plug.

    Note
      Should be ok as long as Vim Script is supported by the editor (since
      version 8.0).


How to start
  We admit that Vim-plugin is already installed. If not so, go to
  https://github.com/junegunn/vim-plug and follow instructions.

  We configure ~/.vimrc below (~ means home directory):

>
     call plug#begin('~/.vim/plugged')
     Plug 'cbushdor/MaCoLib'
     call plug#end()
<

  and plugin will be installed in ~/.vim/plugged if everything is well
  configured.  Then type ':wq' to save and, quit. Edit ~/.vimrc to 
  relaunch. Then, type ':PlugInstall' and, look if plugin is installing 
  itself. A prompt will ask not to forget to set 'g:myEmail' in $MYVIMRC if
  not found.

==============================================================================
INTRO                                                       *help_MaCoLib_intro*

Sometimes it is hard to read and, to UNDERSTAND!

==============================================================================
VARIABLES                                               *help_MaCoLib_Variables*

g:current_script_path 	We get the source path and script name of MaCoLib.vim.

g:current_path	 	We get current path.
g:local_path_homedir	Path to vimrc that contains files.
g:module_name		We get module name from homedir path.
g:file_ext_ref 		This file ref for extension comp
g:local_path_vimrc	Path to vimrc that contains files
g:local_path_mylibrary 	Path to mylibrary that contains files
g:pathConf 		File that contains local configuration

==============================================================================
FUNCTIONS                                               *help_MaCoLib_Functions*

MyChomp(s) 		Remove last cariage return withing string s.


GetsFileNameFromPath(pfn)	We get file name from path.

GetsScript(sf)		We return Script.

GetsVarString(var)	Creates the string for the global variable name value.
			The 'var' is given and we return variable name 
			prefixed of 'g:' as a string. Nothing set in memory
			yet.

IsVarDefined(var)	This is used to check if 'var' the variable name does 
			exist in memory and, returns g:true. 

CreatesGlobalVar(var)	We set a global variable in memory with var.
			The 'var' parameter is the variable name to set in
			memory. HEnce, g:true is returned if no error met
			otherwise g:false.

LoadSource(file)	Loads source

GetsCurrentFileName()	Gets current file nale

CreatesEnvVar(en) 	We create a envarionment variable string

LoadGlobVar(...)	Load global extension that start with suf(ix)

Rand()			Calculates random number

MyExec(p)		Executes shell script input entered should be 
			returned! p as  ':!read momo;echo $momo'.

MyExecOut(p)		Executes shell script no input expected so no result 
			returned!p as  ':!read momo;echo $momo'


Stop() 			We kill process with the kill command. We need to
                        improve algoprithm.

GetsPid() 		Gets PID

GetsMyExecScript(str)	We create the script line to be executed with execute
			command to get expand(...) value  s.a 
			GetsMyExecScript("<script>"). Read :help expand() for 
			more information.

==============================================================================
OBJECT                                                     *help_MaCoLib_Object*

To create an object or dictionary we need MaCoLib#new() function. We can
call that a constructor. In the next paragraphs, We will use obj as an
instance of the object/dictionary MaCoLib. 
To Summup we will call obj the object declared with MaCoLib#new().
>
      let obj = MaCoLib#new(  
	\           [
	\               [
	\			"Hello test",
	\			":hi comment ctermfg=grey ctermbg=darkblue",
	\			g:func_print_col.MACOLIB_PRINT
	\               ]
	\           ],
	\14)		 
<

MaCoLib#new(...) It creates a new object or dictionary. It is possible to 
                 declare parameters in the order that the user wants wihin
		 constructor MaCoLib#new(...). For instance, the first 
		 argument is the maximum of elements that can be stored in the 
		 stack. If, it  is not specified in arguments list of the
		 constructor then s:DEFAULT_MAX_STACK value is used. In the
		 following, we are going to talk about list of array(s) but we
		 don't use list but array of array(s). So, if in the following
		 a list of array(s) is used, it is an array of array(s) as a
		 matter of fact!!!!!!
		 If, the second argument does not exists, hence an empty array
		 of array(s) is created. If, the second argument of 
		 constructor, does exist here is the format of the inner array 
		 used. The inner array has a specific format. Now, we talk 
		 about this specific format:
			- First is a string to be printed or prompted in 
			  color.
			- Second gives the color to print or prompt the 
			  string (read :help highlight for specific format).
			- Third and, last, has a dictionary. This, has two 
			  possible values. To declare just prefix 
			  "g:func_print_col.<value>". The <value> 
			  can be one of the two s.a MACOLIB_PRINT or
			  MACOLIB_PROMPT but not both at the same time.
			  The MACOLIB_PRINT is used to print the string in
			  color specified by the two previous fields in the
			  current array fields.
			  The MACOLIB_PROMPT is used for prompting the 
			  string in color specified by the two previous 
			  fields in the current array fields.
			  If, no array of array is declared only empty object
			  is returned. If, one of these format is not 
			  respectected then, an error is thrown.
			- If these two fields are repeated several times
			  stack size and or, the list of array(s) then 
			  an error is thrown.
		ERRORS: 
			- If the maximum of elements that can be 
			  stored in the stack is declared twice in arguments
			  list within constructor an error is thrown s.a
			  "Stack max (<number of element specified>) 
			  already specified." .
			- An error can be thrown if, the number of element(s) 
			  in the list of array(s) is over maximum the size 
			  specified within constructor s.a "Max size reached 
			  (<number of element specified>)".
		        - If, the list of array(s) is already declared an 
			  error is thrown "Spec for color and string already 
			  declared in arguments.".
			- If argument declared has not the format specified 
			  then an error is thrown "Argument type should be 
			  v:t_list. ".

obj.addStackStringColor(nuplet)Adds a nuplet to the stack within object <obj>.
                               The format of the nuplet is the following: 

			         nuplet = ["String",':highlight ...',method].

		               The array has a specific format. Now, we talk 
			       about this specific format:
			       	- First is a string to be printed or prompted
				  in color.
				- Second gives the color to print or prompt
				  the string (read :help highlight for 
				  specific format).
				- Third and, last, has a dictionary. This, has
				  two possible values. To declare just prefix 
				  "g:func_print_col.<value>". The <value> can 
				  be one of the two s.a MACOLIB_PRINT or
				  MACOLIB_PROMPT but not both at the same 
				  time. The MACOLIB_PRINT is used to print the 
				  string in color specified by the two 
				  previous fields in the current array fields.
				  The MACOLIB_PROMPT is used for prompt the 
				  string in color specified by the two 
				  previous fields in the current array fields.
				  It is necessary to check 
				  ":help highlight" in vim for the right 
				  format. The methods can be one of these: 
				  g:MACOLIB_PRINT or g:MACOLIB_PROMPT. The 
				  current list can be viewed as a stack.
			       ERRORS:
				  - If stack size reached an error is thrown 
				    s.a "Max size reached " 
				  - If the format of nuplet not respected then
				    an error is thrown s.a "Error detected in 
				    the nuplet format."

obj.prints_and_prompts()    This is a gathering of say() and prompt() 
                            functions (read respective definitions of both
			    functions) in order of declarations (no PROMPT 
			    list and, then PRINT list but only PRINT and 
			    PROMPTS mixed if mixed of  course).
			    ERRORS:
			       - If Stack empty an error is thrown s.a
				 "Error stack is empty".
			       - An error is thrown if value not in 
				 g:MACOLIB_PROMPT or g:MACOLIB_PRINT s.a 
				 "Bad value "... where '...' is extra local 
				 values (this may be deprecated).

obj .say()  We print at the specific color strings if 
	    g:func_print_col.MACOLIB_PRINT is met in the stack.
	    ERRORS
	    	- An error message is thrown when stack empty when obj.say()
		  is invoqued s.a "Nothing to print "... and stack not empty.
	    	- An error message is thrown when the stack is empty  s.a 
		  "Nothing to print "... when obj.say() is invoqued.

obj.prompt()    We prompt messages if g:func_print_col.MACOLIB_PROMPT met. 
		The obj.prompt() within object, will return results of each
		prompts as it appears in the stack order.
		For instance, fisrt prompt result is at rank 0, second prompt 
		result in 1,... in the array returned.
		ERRORS
		   - An error message is thrown when stack empty when
		     obj.prompt() is invoqued s.a "Nothing to prompt "... 
		     and stack not empty.
		   - An error message is thrown when the stack is empty  s.a 
		     "Nothing to prompt "... when obj.prompt() is invoqued.

obj.checks_prints_and_prompts() Check if last field value is well defined.
				ERRORS:
				   - If Stack empty an error is thrown and 
				     error "Error stack is empty".
				   - If field has bad value accepted in the
				     stack an error is thrown "Bad value ".

obj.checks_prints_and_prompt()    We only check how many print(s) are and,
				  how many prompt are ... declared.
				  We return a dictionary where values are 
				  stored s.a {'PRINT': 1, 'PROMPT': 4}.
				  ERRORS:
				  	- Error thrown if value not in 
					g:MACOLIB_PROMPT or g:MACOLIB_PRINT 
					s.a "Bad value "...  where '...' is 
					extra local values.

obj.clearStringColor() 	We erase the whole / full list/stack/heap of strings 
                        declared!
			ERRORS:
				- Error is thrown when there is nothing to
				  clean or, there is nothing in the stack
				  and, we want to clean with extra info.

obj.removeStackStringColor() We remove last element entered from stack (last 
			     in first out).
			     ERRORS:
			     	- Error thrown "Stack is empty "... when stack 
				  is empty. (temporary solution)

obj.isEmptyStackStringColor() Returns v:true if stack is empty else v:false.

obj.addHeapStringColor(tuple)  The function is to add tuple to the heap 
			       in object.
			       tuple = ["String",':highlight ...',method].
			       check :help highlight when in vim for help.
			       The method for printing can be one of these: 
			       g:MACOLIB_PRINT or g:MACOLIB_PROMPT.
			       The current list can be viewed as a heap.

obj.removeHeapStringColor()  We remove last element entered from heap (last in 
                             last out).
			     ERRORS:
			     	- Error thrown "Heap is empty "... when stack 
				  is empty. (temporary solution)

==============================================================================
EXAMPLE                                                   *help_MaCoLib_Example*
In $MYVIMRC you should have something like this.

>
  call plug#begin('~/.vim/plugged')

    " ------------------------------------------------------------------------
    " We put on line our library that MAnage the COlor LIBrary and other stuff
    Plug 'cbushdor/MaCoLib'


    " Add this line for tests purpose
    " The following line will let vim know that you have a plugin locally
    " follow next instructions to create it locally!
    Plug 'cbushdor/MyNewPlugin'
    " ------------------------------------------------------------------------

  call plug#end()
<

Create '~/.vim/plugged/MyNewPlugin/plugin/' directories:

>
  cd ~/.vim/plugged/
  mkdir -p MyNewPlugin/plugin/
  cd MyNewPlugin/plugin/
<

Create 'MyNewVimPlugin.vim' file in ~/.vim/plugged/MyNewPlugin/plugin/:

>
  " We call function MyStartErrorMyHeadersFill_file() when BufNewFile.
  autocmd BufNewFile * execute ":call MyStartErrorMyHeadersFill_file()"

  function! MyStartErrorMyHeadersFill_file(...)
    let MyArray = [
        \ [
        \   "Hello one ",
        \   ':hi MyColor  term=bold ctermfg=Blue guifg=#80a0ff gui=bold'
        \ ] ,
        \ [
        \   "Hello two ",
        \   ':hi MyColor  term=bold ctermfg=Cyan guifg=#80a0ff gui=bold'
        \ ]
        \]

    call AddToPrintColorString(MyArray,
    \     "Hello three",
    \     ':hi MyColor  term=bold ctermfg=Red guifg=#80a0ff gui=bold')
    call PrintsColoredString(MyArray)
  endfunction
<

If you open a file in ~/Downloads s.a:

>
	cd ~/Downloads
	vi file.txt
<

you should have something on the screen!

==============================================================================
WARNING                                                     *help_MaCoLib_notes*
	Plugin under construction. It is unstable.

==============================================================================
HELP						   	    *help_MaCoLib_extra*
	:help highlight or :help hi

==============================================================================
CREDITS                                                   *help_MaCoLib_credits*

	https://www.vim.org/

==============================================================================
LICENSE 						  *help_MaCoLib_licence*

	Permission is granted to copy, distribute, and/or modify this document 
	under the terms of the Creative Commons Attribution-NonCommercial 3.0
	Unported License, which is available at 
	http://creativecommons.org/licenses/by-nc/3.0/.


Address : cbushdor at laposte dot net

vim:tw=78:ts=8:noet:ft=help:norl:
