*MaCoLib.txt*       my MAnager for COlor LIBrary and some more stuff

		Creation Date :2024-02-15 23:11:52
		Last Modified : 2024-03-10 01:22:08
		Version : 0.0.0.138

==============================================================================
CONTENTS                                                *MaCoLib* *help_MaCoLib*

How to Install Plugin                                   |help_MaCoLib_install|
Intro                                                     |help_MaCoLib_intro|
Variables                                             |help_MaCoLib_Variables|
Functions                                             |help_MaCoLib_Functions|
Example                                                 |help_MaCoLib_Example|
Warning						          |help_MaCoLib_notes|
Helps                                                     |help_MaCoLib_extra|
Credits                                                 |help_MaCoLib_credits|
Licence                                                 |help_MaCoLib_licence|

==============================================================================
How to Install Plugin                                     *help_MaCoLib_install*

Technical requirements

    * Vim (text editor): Version 9.0.1050.
    * System macOS: Version 13.2.1 (22D68).
    * System Fedora: Version 38beta (Should work on other linux distros too).
    * Scripts: Markdown, Vim Script, shell sh.
    * Vim plugin: Vim-plug.

    Note
      Should be ok as long as Vim Script is supported by the editor (since
      version 8.0).


How to start
  We admit that Vim-plugin is already installed. If not so, go to
  https://github.com/junegunn/vim-plug and follow instructions.

  We configure ~/.vimrc below (~ means home directory):

>
     call plug#begin('~/.vim/plugged')
     Plug 'cbushdor/MaCoLib'
     call plug#end()
<

  and plugin will be installed in ~/.vim/plugged if everything is well
  configured.  Then type ':wq' to save and, quit. Edit ~/.vimrc to 
  relaunch. Then, type ':PlugInstall' and, look if plugin is installing 
  itself. A prompt will ask not to forget to set 'g:myEmail' in $MYVIMRC if
  not found.

==============================================================================
INTRO                                                       *help_MaCoLib_intro*

Sometimes it is hard to read and, to UNDERSTAND!

==============================================================================
VARIABLES                                               *help_MaCoLib_Variables*

g:current_script_path 	We get the source path and script name of MaCoLib.vim.

g:current_path	 	We get current path.
g:local_path_homedir	Path to vimrc that contains files.
g:module_name		We get module name from homedir path.
g:file_ext_ref 		This file ref for extension comp
g:local_path_vimrc	Path to vimrc that contains files
g:local_path_mylibrary 	Path to mylibrary that contains files
g:pathConf 		File that contains local configuration

==============================================================================
FUNCTIONS                                               *help_MaCoLib_Functions*

MyChomp(s) 		Remove last cariage return withing string s.


GetsFileNameFromPath(pfn)	We get file name from path.

GetsScript(sf)		We return Script.

GetsVarString(var)	Creates the string for the global variable name value.
			The 'var' is given and we return variable name 
			prefixed of 'g:' as a string. Nothing set in memory
			yet.

IsVarDefined(var)	This is used to check if 'var' the variable name does 
			exist in memory and, returns g:true. 

CreatesGlobalVar(var)	We set a global variable in memory with var.
			The 'var' parameter is the variable name to set in
			memory. HEnce, g:true is returned if no error met
			otherwise g:false.

LoadSource(file)	Loads source

GetsCurrentFileName()	Gets current file nale

CreatesEnvVar(en) 	We create a envarionment variable string

LoadGlobVar(...)	Load global extension that start with suf(ix)

Rand()			Calculates random number

MyExec(p)		Executes shell script input entered should be 
			returned! p as  ':!read momo;echo $momo'.

MyExecOut(p)		Executes shell script no input expected so no result 
			returned!p as  ':!read momo;echo $momo'

GetsPid() 		Gets PID

PrintsColoredString(arr)Prints colored string. Needs array as parameter.
			let MyArray = [['string1','highlightString1'], 
			['string2','highlighString2'] ]

AddToPrintColorString(a,s,c)	Add new info to print in the string
				array, new string, color

ClearStringColor(a) 	We erase the string a is the is external Array 
			declared!

AddStackStringColor(s,tuple) AddStackStringColor is to add tuple to s at the 
			     end returns the new list

AddHeadStringColor(s,tuple) 	AddHeadStringColor is to add tuple to s at the 
				beging returns the new list

GetsMyExecScript(str)	We create the script line to be executed with execute
			command to get expand(...) value  s.a 
			GetsMyExecScript("<script>"). Read :help expand() for 
			more information.

==============================================================================
EXAMPLE                                                   *help_MaCoLib_Example*
In $MYVIMRC you should have something like this.

>
  call plug#begin('~/.vim/plugged')

    " ------------------------------------------------------------------------
    " We put on line our library that MAnage the COlor LIBrary and other stuff
    Plug 'cbushdor/MaCoLib'


    " Add this line for tests purpose
    " The following line will let vim know that you have a plugin locally
    " follow next instructions to create it locally!
    Plug 'cbushdor/MyNewPlugin'
    " ------------------------------------------------------------------------

  call plug#end()
<

Create '~/.vim/plugged/MyNewPlugin/plugin/' directories:

>
  cd ~/.vim/plugged/
  mkdir -p MyNewPlugin/plugin/
  cd MyNewPlugin/plugin/
<

Create 'MyNewVimPlugin.vim' file in ~/.vim/plugged/MyNewPlugin/plugin/:

>
  " We call function MyStartErrorMyHeadersFill_file() when BufNewFile.
  autocmd BufNewFile * execute ":call MyStartErrorMyHeadersFill_file()"

  function! MyStartErrorMyHeadersFill_file(...)
    let MyArray = [
        \ [
        \   "Hello one ",
        \   ':hi MyColor  term=bold ctermfg=Blue guifg=#80a0ff gui=bold'
        \ ] ,
        \ [
        \   "Hello two ",
        \   ':hi MyColor  term=bold ctermfg=Cyan guifg=#80a0ff gui=bold'
        \ ]
        \]

    call AddToPrintColorString(MyArray,
    \     "Hello three",
    \     ':hi MyColor  term=bold ctermfg=Red guifg=#80a0ff gui=bold')
    call PrintsColoredString(MyArray)
  endfunction
<

If you open a file in ~/Downloads s.a:

>
	cd ~/Downloads
	vi file.txt
<

you should have something on the screen!

==============================================================================
WARNING                                                     *help_MaCoLib_notes*
	Plugin under construction. It is unstable.

==============================================================================
HELP						   	    *help_MaCoLib_extra*
	:help highlight or :help hi

==============================================================================
CREDITS                                                   *help_MaCoLib_credits*

	https://www.vim.org/

==============================================================================
LICENSE 						  *help_MaCoLib_licence*

	Permission is granted to copy, distribute, and/or modify this document 
	under the terms of the Creative Commons Attribution-NonCommercial 3.0
	Unported License, which is available at 
	http://creativecommons.org/licenses/by-nc/3.0/.


Address : cbushdor at laposte dot net

vim:tw=78:ts=8:noet:ft=help:norl:
